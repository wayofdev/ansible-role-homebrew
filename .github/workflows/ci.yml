---

name: ci

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      shouldPublish:
        description: 'Should publish role to Ansible Galaxy? (yes/no)'
        required: false
        default: 'no'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v3

      - name: Setup python3
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install poetry
        uses: gi0baro/setup-poetry-bin@v1

      - name: Install dependencies
        run: set -eux; make install-deps

      - name: Run linting tasks
        run: set -eux; make lint

  integration-macos-native:
    name: Integration on macOS (native)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-12
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v3

      - name: Uninstall built-in homebrew
        run: sh tests/uninstall-homebrew.sh

      - name: Install poetry
        uses: gi0baro/setup-poetry-bin@v1

      - name: Install test dependencies
        run: export INSTALL_POETRY=false; make install

      - name: Test the playbook
        run: make test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Idempotence check
        # This `shell` line is required to get around a known issue: https://github.com/actions/runner/issues/241#issuecomment-745902718
        # ! Not supported by macOS !
        # shell: 'script -q -e -c "bash {0}"'
        # run: make test-idempotent
        run: |
          IDEMPOTENCE=$(mktemp)
          cd tests && poetry run ansible-playbook test.yml | tee -a ${IDEMPOTENCE}
          tail ${IDEMPOTENCE} \
            | grep -q 'changed=0.*failed=0' \
            && (echo 'Idempotence test: pass' && exit 0) \
            || (echo 'Idempotence test: fail' && exit 1)
        env:
          ANSIBLE_FORCE_COLOR: '1'
          ANSIBLE_STDOUT_CALLBACK: 'unixy'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #  integration-macos-molecule:
  #    name: Integration on macOS
  #    runs-on: macos-${{ matrix.os }}
  #    strategy:
  #      max-parallel: 4
  #      matrix:
  #        os: ["12"]
  #        scenario: ["default-macos-on-localhost"]
  #    steps:
  #      - name: Check out the codebase
  #        uses: actions/checkout@v3
  #      - name: Uninstall built-in homebrew
  #        run: sh tests/uninstall-homebrew.sh
  #      - name: Install poetry
  #        uses: gi0baro/setup-poetry-bin@v1
  #      - name: Install test dependencies
  #        run: export INSTALL_POETRY=false; make install
  #      - name: Run molecule tests
  #        run: poetry run molecule test --scenario-name "${SCENARIO}" -- -vvv --become
  #        env:
  #          SCENARIO: ${{ matrix.scenario }}
  #          PY_COLORS: '1'
  #          ANSIBLE_FORCE_COLOR: '1'
  #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  integration-linux-molecule:
    name: Integration on Linux
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9"]
        scenario: ["default"]
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v3

      - name: Setup python3
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: gi0baro/setup-poetry-bin@v1

      - name: Install test dependencies
        run: export INSTALL_POETRY=false; make install

      - name: Run molecule tests
        run: poetry run molecule test --scenario-name "${SCENARIO}" -- -vvv --become
        env:
          SCENARIO: ${{ matrix.scenario }}
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    if: github.event.inputs.shouldPublish == 'yes' || github.ref == 'refs/heads/master'
    needs:
      - lint
      - integration-macos-native
      # - integration-macos-molecule
      - integration-linux-molecule
    runs-on: ubuntu-latest
    steps:
      - name: Publish to Ansible Galaxy
        uses: robertdebock/galaxy-action@1.2.1
        with:
          galaxy_api_key: ${{ secrets.GALAXY_API_KEY }}
