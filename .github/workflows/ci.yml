---

name: ci

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      shouldPublish:
        description: 'Should publish role to Ansible Galaxy? (yes/no)'
        required: false
        default: 'no'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v3

      - name: Setup python3
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install poetry into system
        uses: gi0baro/setup-poetry-bin@v1
        with:
          virtualenvs-in-project: true

      - name: Load cached .venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make install-deps
        env:
          PY_COLORS: '1'

      - name: Run linting tasks
        run: make lint

  integration-macos-molecule:
    name: Integration on macOS
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: ["macos-12"]
        python-version: ["3.9"]
        scenario: ["default-macos-on-localhost"]
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Check out the codebase
        uses: actions/checkout@v3
        with:
          repository: actions/cache
          ref: v3
          path: .tmp/actions/cache

      - name: Check out fix - make actions/cache@v3 run always, not only when job succeeds
        # Tweak `action.yml` of `actions/cache@v3` to remove its `post-if`
        # condition, making it default to `post-if: always()`.
        run: |
          sed -i -e '/ post-if: /d' .tmp/actions/cache/action.yml

      # Uncomment for debugging over SSH
      # - name: Setup upterm.dev session for SSH debugging
      #   uses: lhotari/action-upterm@v1

      - name: Uninstall built-in homebrew
        run: sh .github/scripts/uninstall-homebrew.sh

      - name: Update built-in macOS pip
        run: make update-pip

      - name: Install poetry into system
        uses: gi0baro/setup-poetry-bin@v1
        with:
          virtualenvs-in-project: true

      - name: Load cached .venv
        id: cached-poetry-dependencies
        uses: ./.tmp/actions/cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies (cached)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make install-deps
        env:
          PY_COLORS: '1'

      - name: Install dependencies
        run: make install-deps

      - name: Run molecule tests
        run: poetry run molecule test --scenario-name "${SCENARIO}" -- -v
        env:
          SCENARIO: ${{ matrix.scenario }}
          PY_COLORS: '1'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  integration-linux-molecule:
    name: Integration on Linux
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9"]
        scenario: ["default"]
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v3

      - name: Setup python3
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry into system
        uses: gi0baro/setup-poetry-bin@v1
        with:
          virtualenvs-in-project: true

      - name: Load cached .venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies (cached)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make install-deps

      # - name: Install dependencies
      #   run: |
      #     poetry install --no-interaction
      #     poetry run ansible-galaxy install -r requirements.yml
      #   env:
      #     PY_COLORS: '1'

      - name: Run molecule tests
        run: poetry run molecule test --scenario-name "${SCENARIO}" -- -v
        env:
          SCENARIO: ${{ matrix.scenario }}
          PY_COLORS: '1'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    if: github.event.inputs.shouldPublish == 'yes' || github.ref == 'refs/heads/master'
    needs:
      - lint
      - integration-macos-molecule
      - integration-linux-molecule
    runs-on: ubuntu-latest
    steps:
      - name: Publish to Ansible Galaxy
        uses: robertdebock/galaxy-action@1.2.1
        with:
          galaxy_api_key: ${{ secrets.GALAXY_API_KEY }}

...
