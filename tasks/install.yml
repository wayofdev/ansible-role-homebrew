---

- name: Homebrew | Include | Install pre-requisites for Linux systems
  ansible.builtin.include_tasks: _partials/install-reqs.yml
  when: ansible_system == 'Linux'
  tags:
    - brew-install

- name: Homebrew | Include | Install Homebrew on arm64 (M1) machines
  ansible.builtin.include_tasks: _partials/install-arm64.yml
  when: ansible_machine == 'arm64'
  tags:
    - brew-install

- name: Homebrew | Include | Install Homebrew on x86_64 (Intel) machines
  ansible.builtin.include_tasks: _partials/install-x86.yml
  when: ansible_machine == 'x86_64'
  tags:
    - brew-install

- name: Homebrew | Install | Ensure Homebrew directory exists
  ansible.builtin.file:
    path: "{{ homebrew_install_path }}"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"
    state: directory
    mode: 0775
  become: true
  tags:
    - brew-install

- name: Homebrew | Get latest release tag
  block:
    - name: Homebrew | Install | Get releases
      delegate_to: localhost
      ansible.builtin.uri:
        url: "https://api.github.com/repos/Homebrew/brew/releases"
        body_format: json
        headers:
          Authorization: "{{ ((lookup('env', 'GITHUB_TOKEN') | length > 0) | ternary('Bearer ' + lookup('env', 'GITHUB_TOKEN'), null)) | default(omit) }}"
      register: brew_releases
      until: brew_releases is not failed
      retries: 9

    - name: Homebrew | Install | Get latest release from json array
      ansible.builtin.set_fact:
        brew_latest_release: "{{ brew_releases.json
          | json_query('[?prerelease==`false` && draft==`false`].tag_name')
          | community.general.version_sort
          | last | regex_replace('^v?(.*)$', '\\1') }}"
  when:
    - brew_latest_release is not defined
    - not homebrew_repository_use_master | bool
  run_once: true
  tags:
    - brew-install

- name: Homebrew | Install | Cloning latest release to "{{ homebrew_install_path }}"
  ansible.builtin.git:
    repo: "{{ homebrew_repository }}"
    version: "{{ brew_latest_release if homebrew_repository_use_master == false else 'master' }}"
    dest: "{{ homebrew_install_path }}"
    update: false
    depth: 1
  become: true
  become_user: "{{ brew_user }}"
  tags:
    - brew-install

- name: Homebrew | Install | Ensure proper permissions and ownership on "{{ homebrew_bin_path }}" directory
  ansible.builtin.file:
    path: "{{ homebrew_bin_path }}"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"
    state: directory
    mode: 0775
  become: true
  tags:
    - brew-install

- name: Homebrew | Install | Ensure proper ownership on "{{ homebrew_install_path }}" directory and it's contents
  ansible.builtin.file:
    path: "{{ homebrew_install_path }}"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"
    state: directory
    mode: 0755
    recurse: true
  # fix idempotence and remove changed_when: false
  changed_when: false
  become: true
  tags:
    - brew-install

- name: Homebrew | Install | Check if binary is already in place
  ansible.builtin.stat:
    path: "{{ homebrew_bin_path }}/brew"
  register: brew_binary
  check_mode: false
  tags:
    - brew-install

- name: Homebrew | Install | Symlink brew to {{ homebrew_bin_path }}
  ansible.builtin.file:
    src: "{{ homebrew_install_path }}/bin/brew"
    dest: "{{ homebrew_bin_path }}/brew"
    state: link
  when: not brew_binary.stat.exists
  become: true
  tags:
    - brew-install

- name: Homebrew | Include | Install Homebrew on x86_64 (Intel) machines
  ansible.builtin.include_tasks: _partials/configure-path.yml
  tags:
    - brew-install

- name: Homebrew | Install | Ensure proper folders are in place
  ansible.builtin.file:
    path: "{{ homebrew_prefix }}/{{ folder_item }}"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"
    state: directory
    mode: 0775
  become: true
  loop: "{{ homebrew_folders }}"
  loop_control:
    loop_var: folder_item
  # fix idempotence and remove changed_when: false
  changed_when: false
  tags:
    - brew-install

- name: Homebrew | Install | Analytics | Get current status
  ansible.builtin.command: "{{ homebrew_bin_path }}/brew analytics"
  register: brew_analytics
  changed_when: false
  become: "{{ (brew_user != ansible_user_id) | bool }}"
  become_user: "{{ brew_user }}"
  tags:
    - brew-install
    - brew-analytics

- name: Homebrew | Install | Analytics | Trigger analytics status â€“ set to "{{ homebrew_collect_analytics | ternary('on', 'off') }}"
  ansible.builtin.command: "{{ homebrew_bin_path }}/brew analytics {{ homebrew_collect_analytics | ternary('on', 'off') }}"
  when: not homebrew_analytics_vars[homebrew_collect_analytics] in brew_analytics.stdout
  become: "{{ (brew_user != ansible_user_id) | bool }}"
  become_user: "{{ brew_user }}"
  tags:
    - brew-install
    - brew-analytics

- name: Homebrew | Install | Register cache location
  ansible.builtin.command: "{{ homebrew_bin_path }}/brew --cache"
  register: brew_cache_path
  become: "{{ (brew_user != ansible_user_id) | bool }}"
  become_user: "{{ brew_user }}"
  changed_when: false
  tags:
    - brew-install

- name: Homebrew | Install | Get installed version
  ansible.builtin.command: "{{ homebrew_bin_path }}/brew --version"
  register: brew_version
  become: "{{ (brew_user != ansible_user_id) | bool }}"
  become_user: "{{ brew_user }}"
  changed_when: false
  tags:
    - brew-install
